# ISUCON用 コード修正ルール

## エラー調査手順

1. エラーメッセージを確認し、具体的な問題を特定する
2. 関連するコードを読み取り、問題の原因を分析する
3. 類似の問題が発生している箇所がないか確認する

## コード変更管理ルール

1. 変更は小さな単位で行い、それぞれの目的を明確にする
2. 変更後は必ずテストを行い、問題が解決したことを確認する
3. 変更内容は適切にコミットし、日本語でわかりやすいコミットメッセージを記述する
4. 関連する変更は同じブランチにまとめる
5. コードは go build が通ったことを確認してから提示する
6. 提示する前に go fmt をかけて整形する

## パフォーマンス改善の一般原則

1. ボトルネックを特定してから最適化を行う
2. 最も効果の高い改善から着手する
3. 変更前後でパフォーマンスを計測し、効果を確認する
4. パフォーマンス改善はキャッシュやバックオフ戦略等による ad-hoc な対策よりも N+1 問題の解消など、ロジック自体を早くすることを優先する
5. https://github.com/okashoi/isucon12q-practice-20250330/issues/1 で最新の施策状況がやり取りされているので、その内容を施策の優先度判断に反映する

## 作業進行ルール

1. サイズの大きいファイルを読み込む前には確認を挟む
2. 複雑な変更を行う場合は、事前に変更計画を説明する
3. 変更の影響範囲を明確にし、副作用がないか検討する
4. 作業の進捗状況を定期的に報告する
